(ns euler.problem045)

;; Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
;; Triangle         T_(n)=n(n+1)/2      1, 3, 6, 10, 15, ...
;; Pentagonal       P_(n)=n(3n-1)/2     1, 5, 12, 22, 35, ...
;; Hexagonal        H_(n)=n(2n-1)       1, 6, 15, 28, 45, ...
;;
;; It can be verified that T_(285) = P_(165) = H_(143) = 40755.
;;
;; Find the next triangle number that is also pentagonal and hexagonal.

(defn- triangle-numbers []
  (letfn [(tn [n] (/ (* n (inc n)) 2))]
    (map tn (iterate inc 1))))

(defn- pentagonal-numbers []
  (letfn [(pn [n] (/ (* n (-(* n 3) 1)) 2))]
    (map pn (iterate inc 1))))

(defn- hexagonal-numbers []
  (letfn [(hn [n] (* n (- (* 2 n) 1)))]
    (map hn (iterate inc 1))))

;;  (cond
;;   (nil? arglist) nil
;;   (nil? (rest arglist)) (seq (first arglist))
;;   :else (cons (first arglist) (spread (rest arglist)))))

(defn- first-match [t p h]
  (let [tn   (first t)
        pn   (first p)
        hn   (first h)
        minv (min tn pn hn)]
    (cond (== tn pn hn) tn
          (== tn minv) (recur (next t) p h)
          (== pn minv) (recur t (next p) h)
          (== hn minv) (recur t p (next h))
          :else (do (println (list tn pn hn)) (assert false)))))

(defn solve []
  (first-match (drop-while #(<= % 40755) (triangle-numbers))
               (drop-while #(<= % 40755) (pentagonal-numbers))
               (drop-while #(<= % 40755) (hexagonal-numbers))))
